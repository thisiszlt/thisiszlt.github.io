{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.9984021fd9fbad264fd5.hot-update.js","sources":["webpack:///./pages/components/Scanner.js"],"sourcesContent":["import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport {Icon,Spin,message,Select} from 'antd';\r\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\r\nimport '../../static/css/Layout.css';\r\nimport {settingsFromPage} from './SettingPage';\r\n\r\n\r\nclass EachResult extends React.Component{\r\n    copyScannerResult=e=>{\r\n        const kUtil=window.kUtil;\r\n        // kUtil.copyToClipBoard(this.props.content);\r\n        kUtil.copyToClipBoard(e.target.innerText);\r\n        var config={};\r\n        config.content=\"copy successfully!\";\r\n        config.icon=<Icon type=\"smile\" style={{color:\"#FE8E14\"}}></Icon>;\r\n        message.config({\r\n            top:window.innerHeight-180,\r\n            duration:1.5,\r\n        });\r\n        message.open(config);\r\n    }\r\n\r\n    render(){\r\n        let txt = this.props.content;\r\n        let possibleLink = txt;\r\n        if (!txt.startsWith('http') && (txt.startsWith('www') || -1 !== txt.indexOf('.com') ||\r\n            -1 !== txt.indexOf('.net') || -1 !== txt.indexOf('.org') || -1 !== txt.indexOf('.edu'))) {\r\n            possibleLink = 'http://' + txt;\r\n        }\r\n        let isLink = possibleLink.startsWith('http');\r\n        return(\r\n            <div className=\"result-content\">\r\n                <>\r\n                    <><span style={{color:\"#FE8E14\"}}>{this.props.format}: </span></>\r\n                    {\r\n                        isLink?\r\n                        <a href={possibleLink} target={\"_blank\"} style={{textDecoration:\"underline\"}} >{this.props.content}</a>\r\n                        : <span onClick={this.copyScannerResult} style={{fontSize:16}}>{this.props.content}</span>\r\n                    }\r\n                    <><span style={{color:\"#FE8E14\"}}> x {this.props.count}</span></>\r\n                    {/* <Button type=\"link\" icon=\"copy\" size=\"small\" style={{float:\"right\"}}  onClick={this.copyScannerResult.bind(this)}></Button> */}\r\n                </>\r\n            </div>\r\n            )\r\n        }\r\n}\r\n\r\n\r\nclass Result extends React.Component{\r\n    render(){\r\n        const resultItems = this.props.resultsInfo.slice(-3).map((ri,index)=>\r\n            <EachResult key={index} content = {ri.result!=undefined?ri.result.BarcodeText:ri.BarcodeText} \r\n            count={ri.count} \r\n            format={ri.result!=undefined?ri.result.BarcodeFormatString:ri.BarcodeFormatString}>\r\n            </EachResult>\r\n        );\r\n        \r\n        return(\r\n            <div className=\"result-container\">\r\n                {resultItems}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass Canvas extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state=({\r\n            isDraw:false\r\n        });\r\n        this.canvas = React.createRef();\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        let point = this.props.point;\r\n        let x1 = point[0].split(',')[0];\r\n        let y1 = point[0].split(',')[1];\r\n        let x2 = point[1].split(',')[0];\r\n        let y2 = point[1].split(',')[1];\r\n        let x3 = point[2].split(',')[0];\r\n        let y3 = point[2].split(',')[1];\r\n        let x4 = point[3].split(',')[0];\r\n        let y4 = point[3].split(',')[1];\r\n\r\n        let leftMin = Math.min(x1, x2, x3, x4);\r\n        //let rightMax = Math.max(x1, x2, x3, x4);\r\n        let topMin = Math.min(y1, y2, y3, y4);\r\n        //let bottomMax = Math.max(y1, y2, y3, y4);\r\n\r\n        let _x1 = x1 - leftMin;\r\n        let _x2 = x2 - leftMin;\r\n        let _x3 = x3 - leftMin;\r\n        let _x4 = x4 - leftMin;\r\n        let _y1 = y1 - topMin;\r\n        let _y2 = y2 - topMin;\r\n        let _y3 = y3 - topMin;\r\n        let _y4 = y4 - topMin;\r\n\r\n\r\n        var canvas = this.canvas.current;\r\n        //console.log(_x1,_y1,_x2,_y2,_x3,_y3,_x4,_y4);\r\n        if(canvas.getContext){\r\n            //debugger;\r\n            let ctx = canvas.getContext(\"2d\");\r\n            ctx.fillStyle = 'rgba(254,180,32,0.5)';\r\n            ctx.clearRect(0,0,canvas.width,canvas.height);\r\n            ctx.beginPath();\r\n            ctx.moveTo(_x1, _y1);\r\n            ctx.lineTo(_x2, _y2);\r\n            ctx.lineTo(_x3, _y3);\r\n            ctx.lineTo(_x4, _y4);\r\n            ctx.fill();\r\n        }\r\n\r\n    }\r\n\r\n    render(){\r\n        let point = this.props.point;\r\n        let x1 = point[0].split(',')[0];\r\n        let y1 = point[0].split(',')[1];\r\n        let x2 = point[1].split(',')[0];\r\n        let y2 = point[1].split(',')[1];\r\n        let x3 = point[2].split(',')[0];\r\n        let y3 = point[2].split(',')[1];\r\n        let x4 = point[3].split(',')[0];\r\n        let y4 = point[3].split(',')[1];\r\n\r\n        let leftMin = Math.min(x1, x2, x3, x4);\r\n        let rightMax = Math.max(x1, x2, x3, x4);\r\n        let topMin = Math.min(y1, y2, y3, y4);\r\n        let bottomMax = Math.max(y1, y2, y3, y4);\r\n        let cvsStyle={\r\n            position:\"absolute\",\r\n            left:leftMin+\"px\",\r\n            top:topMin+\"px\",\r\n            //background:\"#80008021\",\r\n        };\r\n        return(\r\n            <>\r\n            {\r\n                <canvas\r\n                ref={this.canvas}\r\n                width={rightMax-leftMin} height={bottomMax-topMin} style={cvsStyle}>\r\n                </canvas>\r\n            }\r\n            </>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\n// const Dynamsoft = window.Dynamsoft;\r\nvar Dynamsoft;\r\nlet scanner = null;\r\n\r\n\r\nclass Scanner extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state=({\r\n            resultsInfo:[],\r\n            isOpen:false,\r\n            resultsPoint:[],\r\n            camera:0,\r\n            cameraList:[],\r\n            isFullRegion:this.props.isFullRegion,\r\n            resolution:settingsFromPage.resolution,\r\n            barcodeFormat:settingsFromPage.barcodeformat,\r\n            localization:settingsFromPage.localization,\r\n            deblurLevel:settingsFromPage.deblurlevel,\r\n            cameraOptions:null,\r\n        });\r\n\r\n    }\r\n\r\n\r\n    showScanner(){\r\n        var updateFrame = ()=>{\r\n            var regionScale = 1.0*this.props.region/100;\r\n            var regionWidth =  regionScale*window.innerWidth;\r\n            var regionHeight = 0.5*regionScale*window.innerHeight;\r\n            var r =scanner.getResolution();\r\n            var vW = r[0];\r\n            var vH = r[1];\r\n            var left,right,top,bottom;\r\n            if(vW>=window.innerWidth){      //resolution > screen width, mainly mobiles\r\n                if(regionWidth>=250){\r\n                    left = (window.innerWidth-regionWidth)/2/vW;\r\n                    right = (window.innerWidth+regionWidth)/2/vW;\r\n                    top = (vH-250)/2/vH;\r\n                    bottom = (vH+250)/2/vH;\r\n                }\r\n                else{\r\n                    left = (window.innerWidth-regionWidth)/2/vW;\r\n                    right = (window.innerWidth+regionWidth)/2/vW;\r\n                    top = (vH-regionHeight)/2/vH;\r\n                    bottom = (vH+regionHeight)/2/vH;\r\n                    //console.log(window.innerWidth,regionScale*window.innerWidth,regionWidth,left,right);\r\n                    // console.log(\"regionWidth<250 and vw>window.innerWidth\");\r\n                }\r\n            }\r\n\r\n            else if(vW<window.innerWidth){  //resolution > screen width, mainly pc\r\n                if(regionWidth>=250){\r\n                    left = (vW-250)/2/vW;\r\n                    right = (vW+250)/2/vW;\r\n                    top = (vH-250)/2/vH;\r\n                    bottom = (vH+250)/2/vH;\r\n                    // console.log(\"regionWidth>250 and vw<window.innerWidth\");\r\n                }\r\n                else {\r\n                    left = (vW-regionWidth)/2/vW;\r\n                    right = (vW + regionWidth)/2/vW;\r\n                    top = (vH-regionHeight)/2/vH;\r\n                    bottom = (vH+regionHeight)/2/vH;\r\n                }\r\n\r\n            }\r\n\r\n            let settings = scanner.getRuntimeSettings();\r\n\r\n            if(!this.state.isFullRegion){\r\n                settings.region.left = Math.round(left*100);\r\n                settings.region.right = Math.round(right*100);\r\n                settings.region.top = Math.round(top*100);\r\n                settings.region.bottom = Math.round(bottom*100);\r\n                settings.region.measuredByPercentage = 1; \r\n                scanner.updateRuntimeSettings(settings);\r\n                //console.log(scanner.getRuntimeSettings());\r\n            }\r\n            else{\r\n                settings.region.left = 0;\r\n                settings.region.right = 100;\r\n                settings.region.top = 0;\r\n                settings.region.bottom = 100;\r\n                settings.region.measuredByPercentage = 1; \r\n                scanner.updateRuntimeSettings(settings);\r\n            }\r\n        };\r\n\r\n        Dynamsoft.BarcodeScanner.createInstance({\r\n            intervalTime:200,\r\n            UIElement:document.getElementById('scanner'),\r\n            videoSettings: { video: { width: { ideal: 1280 }, height: {ideal: 720 }, facingMode: 'environment' } },\r\n            onFrameRead: results => {\r\n                let resultPointsPerFrame=[];\r\n                for (let i = 0; i < results.length; i++){\r\n                    let result = results[i];\r\n                    resultPointsPerFrame.push(result.LocalizationResult.ResultPoints);\r\n                }\r\n\r\n                let resultsInfo = scanner.arrDiffCodeInfo;\r\n                this.setState({\r\n                    resultsInfo:resultsInfo,\r\n                    resultsPoint:resultPointsPerFrame,\r\n                    isFullRegion:this.props.isFullRegion,\r\n                });\r\n\r\n                if(scanner!==null){\r\n                    updateFrame();\r\n                    //console.log(scanner.getRuntimeSettings());\r\n                }\r\n                // updateFrame();\r\n\r\n                //console.log(this.state.isFullRegion);\r\n            },\r\n            onUnduplicatedRead: (txt, result) => {\r\n                console.log(result);\r\n                \r\n            }\r\n        }).then(s => {\r\n            scanner = s;\r\n            if(scanner._isOpen===false){\r\n                console.log(\"open!\");\r\n                scanner.show().then((paras)=>{\r\n                        // scanner.setResolution(this.state.resolution);\r\n                        scanner.updateVideoSettings({ video: { width: this.state.resolution[0], height:this.state.resolution[1], facingMode: \"environment\" } });\r\n                        var settings = scanner.getRuntimeSettings();\r\n                        settings.barcodeFormatIds=this.state.barcodeFormat;\r\n                        settings.localizationModes=this.state.localization;\r\n                        settings.deblurLevel = this.state.deblurLevel;\r\n                        scanner.updateRuntimeSettings(settings).then(()=>{\r\n                            console.log(scanner.getRuntimeSettings());\r\n                            updateFrame();\r\n                        }).then(()=>{\r\n                            scanner.getAllCameras().then((cameras)=>{\r\n                                this.setState({\r\n                                    cameraList:cameras,\r\n                                    cameraOptions:cameras.map((cameraOption,index)=>\r\n                                        <Select.Option value={\"camera:\"+index} key={cameraOption.deviceId}>{cameraOption.label}</Select.Option>\r\n                                        // <Option value={cameraOption.deviceId} key={\"camera\"+index}>xx</Option>\r\n                                    )\r\n                                });    \r\n                                // scanner.setCurrentCamera(cameras[this.state.camera].deviceId);\r\n                            });\r\n                        });                        \r\n                        }) \r\n            }\r\n            else{\r\n                console.log(\"close!\");\r\n                scanner.close();\r\n            }\r\n        }).then(()=>{\r\n            this.setState({\r\n                isOpen:!this.state.isOpen\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        Dynamsoft = window.Dynamsoft;\r\n        this.showScanner();\r\n        console.log(this.state.barcodeFormat,this.state.cameraOptions);\r\n        \r\n    }\r\n\r\n    componentWillUnmount(){\r\n        scanner!=null&&scanner.close();\r\n        scanner!=null&&scanner.destroy();\r\n    }\r\n\r\n    handleFullRegion(){\r\n        this.setState({\r\n            isFullRegion:this.state.isFullRegion,\r\n        })\r\n    }\r\n   \r\n    onSwitchCamera(value){\r\n        scanner.getAllCameras().then(infos=>{\r\n            // var numOfCamera = this.state.cameraList.length;\r\n            this.setState({\r\n                //camera:this.state.camera===numOfCamera-1?0:this.state.camera+1\r\n                camera:value.split(\":\")[1]\r\n            });\r\n            return infos;\r\n        }).then((infos)=>{\r\n            scanner.setCurrentCamera(infos[this.state.camera].deviceId);\r\n            var config={};\r\n            config.content=\"Switch to \"+infos[this.state.camera].label+\" successfully!\";\r\n            config.icon=<Icon type=\"smile\" style={{color:\"#FE8E14\"}}></Icon>;\r\n            message.config({\r\n                top:window.innerHeight-180,\r\n                duration:1.5,\r\n            });\r\n            message.open(config);\r\n        });\r\n    }\r\n\r\n    render(){\r\n        const allCanvas = this.state.resultsPoint.map((eachResult,index)=>\r\n            <Canvas key={index} point={eachResult}></Canvas>\r\n        );\r\n\r\n        return(\r\n            <>\r\n            <style type=\"text/css\">\r\n                {`\r\n                .waiting{\r\n                    position:absolute;\r\n                    left:50%;\r\n                    top:50%;\r\n                    transform:translate(-50%);\r\n                    color:#FE8E14;\r\n                    transition: opacity 1000ms ease-in;\r\n                }\r\n\r\n                .fade-enter.fade-enter-active {\r\n                    opacity:1;\r\n                    transition: opacity 1000ms ease-in;\r\n                }\r\n\r\n                .fade-enter{\r\n                    opacity:0;\r\n                }\r\n\r\n                .fade-leave{\r\n                    opacity: 1; \r\n                }\r\n\r\n                .fade-leave.fade-leave-active{\r\n                    opacity:0;\r\n                    transition: opacity 3000ms ease-in;\r\n                }\r\n                \r\n                .fade-appear{\r\n                    opacity:0;\r\n                }\r\n\r\n                .fade-appear.fade-appear-active {\r\n                    opacity: 1;\r\n                    transition: opacity 2000ms ease-in;\r\n                }\r\n                `}\r\n            </style>\r\n            <ReactCSSTransitionGroup\r\n                transitionName=\"fade\"\r\n                transitionLeave={true}\r\n                transitionAppear={false}\r\n                transitionEnter={false}\r\n                transitionAppearTimeout={500}\r\n                transitionLeaveTimeout={3500}\r\n                transitionEnterTimeout={2500}\r\n            >\r\n                {\r\n                    !this.state.isOpen&&\r\n                    <Spin \r\n                    className=\"waiting\" \r\n                    tip=\"Accessing Camera list...\" \r\n                    indicator={<Icon type=\"smile\" spin style={{ fontSize: \"3rem\" ,}}></Icon>}>\r\n                    </Spin>    \r\n                }\r\n            </ReactCSSTransitionGroup>           \r\n            \r\n            <div id='scanner' style={{position:\"absolute\",width:\"100%\"}}>\r\n                <div className=\"video-container\">\r\n                    <video className='dbrScanner-video custom-video' playsInline={true}></video>\r\n                {/*{*/}\r\n                    {/*this.state.resultsPoint.length&&*/}\r\n                    {/*<>{allCanvas}</>*/}\r\n                {/*}*/}\r\n                <>{allCanvas}</>\r\n                </div>\r\n\r\n            </div>\r\n            <Result resultsInfo={this.state.resultsInfo}></Result>\r\n            {/* <button onClick={this.onSwitchCamera.bind(this)} style={{position:\"absolute\",top:\"60px\",left:0}}>切换相机</button> */}\r\n            {/* <Button type=\"primary\" size=\"small\" onClick={this.onSwitchCamera.bind(this)} style={{position:\"absolute\",top:\"60px\",left:0,backgroundColor:\"rgb(254, 142, 20)\",border:\"0\"}}>切换相机</Button> */}\r\n            {\r\n                this.state.cameraList.length&&\r\n                <Select onChange={this.onSwitchCamera.bind(this)} \r\n                style={{ position:\"absolute\",top:\"60px\",left:0,width: \"20%\",maxWidth:130,border:\"0\",color:\"#FE8E14\",opacity:\"0.5\" }} \r\n                // defaultValue={\"camera:0\"}\r\n                // placeholder=\"camera\"\r\n                suffixIcon={<Icon type=\"camera\" style={{color:\"#FE8E14\"}}></Icon>}\r\n                defaultActiveFirstOption={false}\r\n                >\r\n                    {this.state.cameraOptions}\r\n                </Select>\r\n                \r\n            }\r\n            \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n//export default connect(mapStateToProps,mapDispatchsToProps)(Scanner);\r\nexport default Scanner;\r\nexport {Result,EachResult};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;;;;AArCA;AACA;AAwCA;;;;;;;;;;;;;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AADA;AAOA;AACA;AAAA;AAIA;;;;AAdA;AACA;AAiBA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAGA;AALA;AAMA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAIA;AACA;AAAA;AAAA;AAFA;AAQA;;;;AApFA;AACA;AACA;AAsFA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAFA;AAgBA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AAEA;AA7BA;AA+BA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AAFA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAIA;AAEA;AAAA;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AASA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAHA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AALA;AAcA;;;;AA/RA;AACA;AACA;AAiSA;;;;;A","sourceRoot":""}